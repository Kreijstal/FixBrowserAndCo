/*
 * CellSplit v0.2 - https://www.cellsplit.org/
 * Copyright (c) 2021-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

use "classes";

import "io/file";
import "io/process";
import "native/native";
import "util/json";

var @home_dir: String;
var @config: JSON;

function get_config_file(fname: String): String
{
	if (System::get_type() == SYSTEM_MACOS) {
		if (!home_dir) {
			home_dir = Process::get_current_environment()["HOME"];
		}
		var dir = home_dir+"/Library/Application Support/CellSplit";
		Path(dir).create_directories();
		return dir+"/"+fname;
	}
	return fname;
}

function @get_config(): JSON
{
	if (!config) {
		var (r, e) = File::read_whole(get_config_file("config.json"));
		if (!e) {
			var (cfg, e2) = JSON::parse(r);
			if (e2) dump(e2);
			config = cfg;
		}
		if (!config) config = {} as JSON;
	}
	return config;
}

function config_set(key: String, value: Dynamic)
{
	get_config(){key} = value;
}

function config_get_int(key: String, def_value: Integer): Integer
{
	return get_config().get(key, def_value).as_int();
}

function config_get_string(key: String, def_value: String): String
{
	return get_config().get(key, def_value).as_string();
}

function config_save()
{
	var (r, e) = File::write_whole(get_config_file("config.json"), get_config().to_bytes());
	if (e) {
		dump(e);
	}
}
