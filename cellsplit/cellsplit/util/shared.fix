/*
 * CellSplit v0.2 - https://www.cellsplit.org/
 * Copyright (c) 2021-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

use "macros";
use "classes";

macro shared_expand(&array, request_len)
{{
	array = __shared_expand(array, request_len);
}}

macro shared_append(&array, &len, src)
{{
	var $src = src;
	shared_append_range(&array, &len, $src, 0, length($src));
}}

macro shared_append_range(&array, &len, src, src_off, src_len)
{{
	var $src_len = src_len;
	array = __shared_expand(array, (len) + $src_len);
	array_copy(array, len, src, src_off, $src_len);
	len += $src_len;
}}

macro shared_remove(&array, &len, idx, cnt)
{{
	len = __shared_remove(array, len, idx, cnt);
}}

function shared_from_array(array, elem_size: Integer): Dynamic
{
	var shared = array_create_shared(length(array), elem_size);
	array_copy(shared, 0, array, 0, length(array));
	return shared;
}

function shared_from_array(array, off: Integer, len: Integer, elem_size: Integer): Dynamic
{
	var shared = array_create_shared(len, elem_size);
	array_copy(shared, 0, array, off, len);
	return shared;
}

function __shared_expand(array, request_len: Integer): Dynamic
{
	var array_len = length(array);
	if (request_len <= array_len) {
		return array;
	}
	
	while (request_len > array_len) {
		array_len = max(4, array_len*2);
	}
	
	var new_array = array_create_shared(array_len, array_get_element_size(array));
	array_copy(new_array, 0, array, 0, length(array));
	return new_array;
}

function __shared_remove(array, len: Integer, idx: Integer, cnt: Integer): Integer
{
	len -= cnt;
	array_copy(array, idx, array, idx+cnt, len - idx);
	return len;
}
