/*
 * CellSplit v0.2 - https://www.cellsplit.org/
 * Copyright (c) 2021-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

use "classes";

// master worker:

const {
	MSG_MASTER_ERROR,
	MSG_MASTER_INIT_ACCOUNT,
	MSG_MASTER_LOGGED_IN,
	MSG_MASTER_GET_SERVER_LIST,
	MSG_MASTER_SERVER_LIST_OBTAINED,
	MSG_MASTER_GET_COOKIE,
	MSG_MASTER_COOKIE_OBTAINED,
	MSG_MASTER_GET_CLIENT_INFO,
	MSG_MASTER_CLIENT_INFO_OBTAINED,
	MSG_MASTER_GET_ACCOUNT_INFO,
	MSG_MASTER_ACCOUNT_INFO_OBTAINED,
	MSG_MASTER_REPORT_PLAYER,
	MSG_MASTER_GET_MODERATION_COOKIE,
	MSG_MASTER_MODERATION_COOKIE_OBTAINED,
	MSG_MASTER_MODERATION_ACTION,
	MSG_MASTER_QUIT_TASK
};

class ServerInfo
{
	var name: String;
	var host: String;
	var port: Integer;

	constructor create(name: String, host: String, port: Integer)
	{
		this.name = name;
		this.host = host;
		this.port = port;
	}
}

class ClientInfo
{
	var account_id: String;
	var features: Integer;
	var permissions: Integer;
	var session_secret: Byte[];

	constructor create()
	{
	}
}

class AccountInfo
{
	var account_id: String;
	var features: Integer;
	var permissions: Integer;

	constructor create()
	{
	}
}

// server worker:

const {
	MSG_SERVER_STARTED,
	MSG_SERVER_STOPPED
};

const {
	MSG_SERVER_STOP
};

// skin worker:

const {
	MSG_SKIN_LOAD_OWN,
	MSG_SKIN_GET_OWN,
	MSG_SKIN_OWN_DATA
};

// script worker:

const {
	MSG_COMPILE_SCRIPT,
	MSG_SCRIPT_QUIT,
	MSG_ENVIRONMENT
};

const {
	MSG_COMPILE_RESULT,
	MSG_SCRIPT_LOG,
	MSG_CHECK_SCRIPT_EDITOR,
	MSG_ADD_MARK,
	MSG_REMOVE_MARK,
	MSG_SET_TARGET,
	MSG_CLEAR_TARGET,
	MSG_SPLIT,
	MSG_EJECT_MASS,
	MSG_RESET
};

struct Pellet
{
	var id: Integer;
	var x: Float;
	var y: Float;
	var size: Float;
	var color: Integer;
}

struct EnvCell
{
	var id: Integer;
	var type: Integer;
	var x: Float;
	var y: Float;
	var size: Float;
	var color: Integer;
	var name: String;
	var own: Boolean;
}

class Environment
{
	var pellets: [Pellet];
	var cells: [EnvCell];

	constructor create()
	{
	}
}
