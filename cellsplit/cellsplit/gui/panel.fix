/*
 * CellSplit v0.2 - https://www.cellsplit.org/
 * Copyright (c) 2021-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

use "classes";

import "image/image";
import "image/rect";
import "image/font";
import "gui/view";
import "gui/subview";
import "gui/event";
import "cellsplit/gui/common";

const {
	@DIR_LEFT   = 0x01,
	@DIR_RIGHT  = 0x02,
	@DIR_TOP    = 0x04,
	@DIR_BOTTOM = 0x08,

	@DIR_TOP_LEFT     = 0x05,
	@DIR_TOP_RIGHT    = 0x06,
	@DIR_BOTTOM_LEFT  = 0x09,
	@DIR_BOTTOM_RIGHT = 0x0A
};

class Panel: SubView
{
	var @title: String;
	var @orig_x: Integer;
	var @orig_y: Integer;
	var @orig_dir: Integer;
	var @border: Integer;
	var @title_font: ScaledFont;
	var @moveable: Boolean;
	var @resizeable: Boolean;

	constructor create(title: String)
	{
		this.title = title;
		border = 5;
		moveable = true;
		resizeable = true;
		add(SubView::create());
	}

	function set_moveable(moveable: Boolean)
	{
		this.moveable = moveable;
	}

	function is_moveable(): Boolean
	{
		return moveable;
	}

	function set_resizeable(resizeable: Boolean)
	{
		this.resizeable = resizeable;
	}

	function is_resizeable(): Boolean
	{
		return resizeable;
	}

	override function handle_resize()
	{
		var scale = get_scale();
		var content = get_child(0);
		var border = iround(this.border * scale) + iround(3 * scale);
		var top = title? iround(18 * scale) : 0;
		content.set_rect(border, border+top, get_width()-2*border, get_height()-2*border-top);
	}

	override function handle_paint(p: Painter)
	{
		var scale = get_scale();
		var border = iround(this.border * scale);
		if (!title_font || title_font.get_size() != 15.5*scale) {
			title_font = get_normal_font(15.5 * scale);
		}
		p.fill_shape(Shape::round_rect(0, 0, get_width(), get_height(), 7.0 * scale, 7.0 * scale), argb(0xCCCCCCCC));
		if (title) {
			p.push();
			p.set_subpixel_rendering(true);
			p.set_blend_gamma(1.3);
			p.clip(border, border, get_width()-border*2-iround(3 * scale), iround(20 * scale));
			p.fill_shape(title_font.get_string_shape(title, iround(8 * scale), iround(19 * scale)), 0xFF000000);
			p.pop();
		}
		draw_children(p);
	}

	override function handle_mouse_event(event: MouseEvent): Boolean
	{
		if (event.get_type() != EVENT_MOUSE_DRAG) {
			switch (get_dir(event.get_x(), event.get_y())) {
				case DIR_LEFT:         set_cursor(CURSOR_RESIZE_W); break;
				case DIR_RIGHT:        set_cursor(CURSOR_RESIZE_E); break;
				case DIR_TOP:          set_cursor(CURSOR_RESIZE_N); break;
				case DIR_BOTTOM:       set_cursor(CURSOR_RESIZE_S); break;
				case DIR_TOP_LEFT:     set_cursor(CURSOR_RESIZE_NW); break;
				case DIR_TOP_RIGHT:    set_cursor(CURSOR_RESIZE_NE); break;
				case DIR_BOTTOM_LEFT:  set_cursor(CURSOR_RESIZE_SW); break;
				case DIR_BOTTOM_RIGHT: set_cursor(CURSOR_RESIZE_SE); break;

				default:
					set_cursor(CURSOR_DEFAULT);
					break;
			}
		}
		if (event.get_type() == EVENT_MOUSE_DOWN && event.get_button() == MOUSE_BUTTON_LEFT) {
			orig_x = event.get_x();
			orig_y = event.get_y();
			orig_dir = get_dir(orig_x, orig_y);
			if (orig_dir == 0 && moveable) {
				orig_dir = -1;
			}
			return true;
		}
		else if (event.get_type() == EVENT_MOUSE_DRAG && (event.get_modifiers() & MOD_LBUTTON) != 0) {
			var dx = event.get_x() - orig_x;
			var dy = event.get_y() - orig_y;
			var rect = get_rect();
			if ((orig_dir & DIR_LEFT) != 0) {
				rect.x1 += dx;
			}
			if ((orig_dir & DIR_TOP) != 0) {
				rect.y1 += dy;
			}
			if ((orig_dir & DIR_RIGHT) != 0) {
				rect.x2 += dx;
				if ((orig_dir & DIR_LEFT) == 0) {
					orig_x += dx;
				}
			}
			if ((orig_dir & DIR_BOTTOM) != 0) {
				rect.y2 += dy;
				if ((orig_dir & DIR_TOP) == 0) {
					orig_y += dy;
				}
			}
			set_rect(rect);
			return true;
		}
		return false;
	}

	function get_content(): SubView
	{
		return get_child(0);
	}

	function set_content(view: SubView)
	{
		remove(get_child(0));
		add(view);
		handle_resize();
	}

	function @get_dir(x: Integer, y: Integer): Integer
	{
		var scale = get_scale();
		var border = iround(this.border * scale);
		var dir = 0;
		if (x < border) dir |= DIR_LEFT;
		if (y < border) dir |= DIR_TOP;
		if (x >= get_width()-border) dir |= DIR_RIGHT;
		if (y >= get_height()-border) dir |= DIR_BOTTOM;
		if (!moveable || !resizeable) {
			dir = 0;
		}
		return dir;
	}
}
