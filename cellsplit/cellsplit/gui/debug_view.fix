/*
 * CellSplit v0.2 - https://www.cellsplit.org/
 * Copyright (c) 2021-2024 Martin Dvorak <jezek2@advel.cz>
 *
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from
 * the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose, 
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

use "classes";

import "image/image";
import "image/rect";
import "image/font";
import "gui/subview";
import "util/string";
import "cellsplit/gui/common";

class DebugView: SubView
{
	var @shape: Shape;
	var @rect: Rect;
	
	constructor create()
	{
		shape = Shape::create();
		rect = Rect();
	}

	function set_text(text: String)
	{
		var font = get_normal_font();
		var y = 20;
		shape.clear();
		foreach (var s in text.split('\n')) {
			font.append_string_shape(shape, s, 5, y, 16, 16);
			y += 20;
		}
		var new_rect = get_rect();
		rect.union(new_rect);
		repaint(rect);
		rect = new_rect;
	}

	function @get_rect(): Rect
	{
		var bounds = shape.get_bounds();
		var x1 = ifloor(bounds[0]);
		var y1 = ifloor(bounds[1]);
		var x2 = iceil(bounds[2]);
		var y2 = iceil(bounds[3]);
		return [x1, y1, x2, y2] as Rect;
	}

	override function handle_paint(p: Painter)
	{
		if (shape) {
			p.fill_shape(shape, 0xFF000000);
		}
	}
}
